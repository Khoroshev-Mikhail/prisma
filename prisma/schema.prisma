// Docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int @unique @default(autoincrement()) @id
  name          String
  password      String    
  email         String @unique
  tgId          String? @unique
  partners      Partner[]
  contracts     Contract[]
  ks3           Ks3[]
  ks2           Ks2[]
  role          Role @default(USER)
  @@map(name: "users")
}
enum Role {
  USER
  ADMIN
  BOOKKEEPER
  SDO
}
model Partner {
  id            Int @unique @default(autoincrement()) @id
  inn           String @unique
  name          String @unique
  form          String
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime? @default(now()) @map(name: "updated_at")
  author        User @relation(fields: [authorId], references: [id])
  authorId      Int
  contacts      String?
  contracts     Contract[]
}
model Contract {
  id            Int @unique @default(autoincrement()) @id
  name          String @unique
  description   String?
  date          DateTime
  expireDate    DateTime?
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime? @default(now()) @map(name: "updated_at")
  partner       Partner @relation(fields: [partnerId], references: [id])
  partnerId     Int
  author        User @relation(fields: [authorId], references: [id])
  authorId      Int
  rejected      Boolean?
  accepted      Boolean?
  ks3           Ks3[]
}
model Ks3 {
  id            Int @unique @default(autoincrement()) @id
  name          String @unique
  date          DateTime
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime? @default(now()) @map(name: "updated_at")
  contract      Contract @relation(fields: [contractId], references: [id])
  contractId    Int
  author        User @relation(fields: [authorId], references: [id])
  authorId      Int
  ks2           Ks2[]
  rejected      Boolean?
  accepted      Boolean?
  comment       String?
}
model Ks2{
  id            Int @unique @default(autoincrement()) @id
  name          String @unique
  date          DateTime
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime? @default(now()) @map(name: "updated_at")
  ks3           Ks3 @relation(fields: [ks3Id], references: [id])
  ks3Id         Int
  author        User @relation(fields: [authorId], references: [id])
  authorId      Int
  rejected      Boolean?
  accepted      Boolean?
  comment       String?
}